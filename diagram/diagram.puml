@startuml
interface ControllableLevel {
~ ControllablePlayerModel getControllablePlayer()
~ void reset()
~ void activate()
~ void disable()
}

interface Stepable {
~ void step(float)
}

enum PlayerState {
+  LEFT
+  RIGHT
+  JUMP_RIGHT
+  JUMP_LEFT
+  IDLE_RIGHT
+  IDLE_LEFT
}

abstract class AbstractScreen {
# {static} BitmapFont font
- {static} float ViewPort
+ {static} float VIEWPORT_WIDTH
+ {static} float VIEWPORT_HEIGHT
# SpriteBatch batch
# OrthographicCamera gameCam
- Viewport gamePort
+ void show()
- void update()
+ void render(float)
+ void resize(int,int)
+ void pause()
+ void resume()
+ void hide()
+ void dispose()
}


class Durability {
- int remaining
- int maximum
+ String toString()
+ int remaining()
+ int maximum()
}


class GameOverScreen {
- Texture texture
- GlyphLayout layout
- String title
- String text
+ void render(float)
}


interface ControllableGameModel {
~ ControllableLevel getControllableLevel()
~ void setState(GameState)
~ void setLevel(String)
}

abstract class DoorModel {
- EventBus eventBus
+ void beginContact(Contact)
+ void endContact(Contact)
+ void preSolve(Contact,Manifold)
+ void postSolve(Contact,ContactImpulse)
}


interface GameStateGettable {
~ GameState getState()
}

abstract class Effect {
- float speedBoost
- float jumpBoost
- int maxDuration
- int duration
+ void step()
+ boolean hasEnded()
+ float getSpeedBoost()
+ float getJumpBoost()
+ Durability getDuration()
}


interface ViewableItem {
~ String getDescription()
~ String getName()
~ Durability getDurability()
}

class EventGameState {
- GameState gameState
+ GameState gameState()
}


class TileGroundLeft {
+ {static} char KEY
}

class ItemHP {
- {static} int DURABILITY
- {static} int DURATION
+ String getDescription()
+ String getName()
}


abstract class ItemModel {
- {static} float WIDTH
- {static} float HEIGHT
- Body body
- World world
- EventBus bus
# Durability durability
# Supplier<Effect> createEffect
- Shape shape
- Body createBody(World,float,float)
+ Effect use()
- void reduceDurability()
+ void destroyBody()
+ float getWidth()
+ float getHeight()
+ float getX()
+ float getY()
+ Durability getDurability()
+ void handleEvent(Event)
+ void beginContact(Contact)
+ void endContact(Contact)
+ void preSolve(Contact,Manifold)
+ void postSolve(Contact,ContactImpulse)
- boolean isContacted(Contact)
}


interface ViewableEffect {
~ Durability getDuration()
}

class PauseScreen {
- Texture texture
- String title
- String text
- GlyphLayout titleLayout
- GlyphLayout textLayout
+ void render(float)
}


class AssetsManager {
- {static} Map<PlayerAction,String> soundEffectMap
- {static} Map<String,String> musicMap
- Map<PlayerAction,Sound> currentEffects
- Music nowPlaying
- String lastPlayed
+ void playMusic(String)
+ void stopMusic()
+ void pauseMusic()
+ void resumeMusic()
+ void playSoundEffect(PlayerAction)
}


class TileGroundSingle {
+ {static} char KEY
}

interface IHealth {
~ void regenerate(int)
~ void damage(int)
~ int getHealth()
~ int getMaxHealth()
}

interface IAssetsManager {
~ void playMusic(String)
~ void stopMusic()
~ void pauseMusic()
~ void resumeMusic()
~ void playSoundEffect(PlayerAction)
}

class EffectJumpBoost {
- {static} float SPEED_BOOST
- {static} float JUMP_BOOST
}

class TileFloatingGroundLeft {
+ {static} char KEY
}

class Controller {
- ControllableGameModel model
- boolean wasMenu
+ boolean keyDown(int)
- void chooseLevel(int)
+ boolean keyUp(int)
+ void handleEvent(Event)
}


class TileFloatingGround {
+ {static} char KEY
}

class EventBus {
- List<EventHandler> handlers
+ void post(Event)
+ void addEventHandler(EventHandler)
+ void removeEventHandler(EventHandler)
}


class InfoScreen {
- {static} Texture texture
- Table tableController
- Table tableItem
- Stage stage
- Label.LabelStyle labelStyle
- ITexturePack texturePack
- ItemMushroom itemMushroom
- ItemEnergy itemEnergy
- Image mushroomImg
- Image energyImg
- void createLeftTable()
- void createRightTable()
- void createItemGroup(Image,ViewableItem)
- void createDescriptionContainer(ViewableItem)
+ void render(float)
}


class TileGround {
+ {static} char KEY
}

interface ControllablePlayerModel {
~ void moveUp(boolean)
~ void moveDown(boolean)
~ void moveLeft(boolean)
~ void moveRight(boolean)
~ void useItem()
}

class Hud {
- {static} int IMG_SIZE
- {static} int TEXT_WIDTH
- {static} int TEXT_HEIGHT
- ViewableLevel level
- ITexturePack texturePack
- Image itemIcon
- Label itemDurability
- HorizontalGroup effectIcons
- Map<ViewableEffect,Image> effectIconImages
- HorizontalGroup effectDurations
- Map<ViewableEffect,Image> effectDurationImages
- Table table
- HorizontalGroup hpGroup
- LinkedList<Image> hpIcons
- void fillTable()
- void updateHp()
- void drawHp()
- void updateItemActors()
- void updateEffectActors()
- Sprite getEffectDuration(ViewableEffect)
- boolean sameEffectIn(List<ViewableEffect>,ViewableEffect)
- void update()
+ void draw()
}


interface PlayerStateGettable {
~ PlayerState getState()
}

class TexturePack {
+ {static} String TILE_NAME
- {static} TextureAtlas atlas
- {static} int TILE_WIDTH
- {static} int TILE_HEIGHT
- {static} Map<PlayerState,Animation<TextureRegion>> PLAYER_ANIMATION_MAP
- float playerStateTime
- PlayerState playerLastState
- {static} Animation<TextureRegion> loadAnimation(String,int)
- TextureRegion getTextureFromAtlas(int)
+ TextureRegion getTileTexture(ViewableTile)
+ TextureRegion getPlayerTexture(PlayerState,float)
- void updatePlayerVariables(PlayerState,float)
+ TextureRegion getItemTexture(ViewableItem)
+ TextureRegion getHpTexture()
+ TextureRegion getEffectTexture(ViewableEffect)
+ TextureRegion getInventorySlot()
}


class TileFloatingGroundLeftSlim {
+ {static} char KEY
}

class MenuScreen {
- {static} float TEXTURE_RATIO
- {static} Texture texture
- {static} String title
- {static} String text
- {static} GlyphLayout titleLayout
- {static} GlyphLayout textLayout
+ void render(float)
}


class ItemEnergy {
- {static} int DURABILITY
- {static} int DURATION
+ String getDescription()
+ String getName()
}


class Saw {
+ {static} char KEY
- {static} int DAMAGE
# Shape createShape(float,float)
# Body createBody(float,float)
+ float getY()
}


class ItemMushroom {
- {static} int DURABILITY
- {static} int DURATION
+ String getDescription()
+ String getName()
}


abstract class DamageTileModel {
- int DAMAGE
- EventBus eventBus
+ void beginContact(Contact)
+ void endContact(Contact)
+ void preSolve(Contact,Manifold)
+ void postSolve(Contact,ContactImpulse)
}


interface ViewableTile {
}
class TileFloatingGroundRightSlim {
+ {static} char KEY
}

class Health {
- Object owner
- EventBus bus
- int max
- int health
+ void regenerate(int)
+ void damage(int)
+ int getHealth()
+ int getMaxHealth()
}


interface Positionable {
~ float getX()
~ float getY()
}

class VictoryScreen {
- Texture texture
- GlyphLayout textLayout
- GlyphLayout titleLayout
- String text
- String title
+ void render(float)
}


interface ContactableTiles {
}
class Main {
+ {static} void main(String[])
}

class EventDispose {
}
class LevelScreen {
- Texture texture
- Table table
- Label.LabelStyle labelStyle
- String title
- Stage stage
- void createLevelTable()
+ void render(float)
}


class TileFloatingGroundSingle {
+ {static} char KEY
}

class LeftLowerDoorClosed {
+ {static} char KEY
# Shape createShape(float,float)
}


class Door2 {
+ {static} char KEY
}

class ContactListeners {
- List<ContactListener> contactListeners
+ boolean add(ContactListener)
+ boolean remove(ContactListener)
+ void beginContact(Contact)
+ void endContact(Contact)
+ void preSolve(Contact,Manifold)
+ void postSolve(Contact,ContactImpulse)
}


class EventStep {
- float timeStep
+ float timeStep()
}


interface Event {
}
class EventDeath {
- Object owner
+ Object owner()
}


interface ILevel {
}
class Spike {
+ {static} char KEY
- {static} int DAMAGE
# Shape createShape(float,float)
}


class EffectHpUp {
- {static} float SPEED_BOOST
- {static} float JUMP_BOOST
}

class EventReachedDoor {
}
class EventLevelChanged {
}
interface ViewableGameModel {
~ ViewableLevel getViewableLevel()
}

class TileFloatingGroundSingleSlim {
+ {static} char KEY
}

enum GameState {
+  MAIN_MENU
+  ACTIVE
+  GAME_OVER
+  PAUSE
+  VICTORY
+  INFO
+  LEVEL
}

class GameScreen {
- {static} float VIEWPORT_WIDTH
- {static} float VIEWPORT_HEIGHT
- EventBus eventBus
- ViewableLevel level
- OrthographicCamera gameCam
- Viewport gamePort
- SpriteBatch batch
- SpriteBatch batchHud
- ITexturePack texturePack
- Stage hud
- Stage BackgroundLayers
+ void show()
+ void render(float)
- void updateCamToPlayer()
- void renderTiles()
- void renderTile(ViewableTile)
- void renderItems()
- void renderItem(ViewableItem)
- void addBackgroundLayers(Array<Texture>)
+ void dispose()
+ void resize(int,int)
+ void pause()
+ void resume()
+ void hide()
}


class EventItemPickedUp {
- ItemModel item
+ ItemModel item()
}


class TileFloatingGroundSlim {
+ {static} char KEY
}

interface ViewableLevel {
~ ViewablePlayerModel getViewablePlayer()
~ List<ViewableTile> getForegroundTiles()
~ List<ViewableTile> getBackgroundTiles()
~ List<ViewableItem> getItems()
}

class EventItemContact {
- Contact contact
- ItemModel item
+ Contact contact()
+ ItemModel item()
}


enum PlayerAction {
+  JUMP
+  PICKUP
+  DAMAGE
}

class TileFactory {
+ {static} Map<Character,Function4<World,EventBus,Float,Float,TileModel>> translation
+ {static} List<TileModel> generate(String,World,EventBus)
+ {static} void register(char,Function4<World,EventBus,Float,Float,TileModel>)
+ {static} void initialize()
}


interface Sizeable {
~ float getWidth()
~ float getHeight()
}

class EventDamage {
- int damage
- Fixture fixture
+ Fixture fixture()
+ int damage()
}


class PlayerModel {
- {static} String USERDATA_BOTTOM
- {static} String USERDATA_LEFT
- {static} String USERDATA_RIGHT
- {static} String USERDATA_TOP
- {static} String USERDATA_SENSOR
- {static} float WIDTH
- {static} float HEIGHT
- {static} float DX
- {static} float DY
- {static} float AIR_CONTROL
- {static} float MAX_DX
- {static} float MAX_DY
- {static} float DENSITY
- {static} float FRICTION
- {static} float FRICTION_BOTTOM
- {static} float RESTITUTION
- {static} Set<Object> USERDATA_SET
- EventBus bus
- World world
- float void_height
- Body body
- List<Effect> effects
- IHealth hp
- Shape shapeTop
- Shape shapeSensor
- PlayerState state
- boolean moveUp
- int contactCountSensor
- ItemModel item
- float immunityCoolDown
- {static} HashSet<Object> createUserDataSet()
- boolean isContacted(Fixture)
+ void moveUp(boolean)
+ void moveDown(boolean)
+ void moveLeft(boolean)
+ void moveRight(boolean)
+ void useItem()
+ float getX()
+ float getY()
+ float getWidth()
+ float getHeight()
+ void step(float)
- boolean isGrounded()
- void move(float,float)
- Body createBody(float,float)
- void createShapes()
- void createFixtures(Body)
+ void handleEvent(Event)
- void handleDamage(int)
+ PlayerState getState()
- void updateState()
+ void beginContact(Contact)
+ void endContact(Contact)
+ void preSolve(Contact,Manifold)
+ void postSolve(Contact,ContactImpulse)
- boolean isSensorToGroundContact(Contact)
- boolean isBottomToGroundContact(Contact)
+ int getHp()
+ List<ViewableEffect> getEffects()
+ ViewableItem getItem()
}


interface ViewablePlayerModel {
~ int getHp()
~ List<ViewableEffect> getEffects()
~ ViewableItem getItem()
}

interface ITexturePack {
~ TextureRegion getTileTexture(ViewableTile)
~ TextureRegion getPlayerTexture(PlayerState,float)
~ TextureRegion getItemTexture(ViewableItem)
~ TextureRegion getEffectTexture(ViewableEffect)
~ TextureRegion getInventorySlot()
~ TextureRegion getHpTexture()
}

class GameView {
+ {static} float VIEWPORT_WIDTH
+ {static} float VIEWPORT_HEIGHT
+ {static} float ASPECT_RATIO
- EventBus bus
- InputProcessor processor
- IAssetsManager assetsManager
- ViewableGameModel model
+ void create()
- void updateScreenAndMusic(GameState)
+ void handleEvent(Event)
}


interface EventHandler {
~ void handleEvent(Event)
}

abstract class TileHalf {
# Shape createShape(float,float)
}

class TileGroundRight {
+ {static} char KEY
}

class Door1 {
+ {static} char KEY
}

interface Function4 {
~ R apply(A,B,C,D)
}

class EventPlayerAction {
- PlayerAction action
+ PlayerAction action()
}


class Level {
- {static} int VELOCITY_ITERATIONS
- {static} int POSITION_ITERATIONS
+ float void_height
- EventBus bus
- float gravity
- float wind
- String default_foreground
- String default_background
- List<Function<World,ItemModel>> default_items
- float default_player_x
- float default_player_y
- World world
- List<TileModel> foreground
- List<TileModel> background
- List<ItemModel> items
- PlayerModel player
- List<ItemModel> toBeRemoved
- boolean isActive
- boolean initialized
+ void beginContact(Contact)
+ void endContact(Contact)
+ void preSolve(Contact,Manifold)
+ void postSolve(Contact,ContactImpulse)
+ void handleEvent(Event)
+ void step(float)
+ ControllablePlayerModel getControllablePlayer()
- void removeEventHandlers()
- void addEventHandlers()
- void disposeContents()
+ void reset()
+ void activate()
+ void disable()
+ ViewablePlayerModel getViewablePlayer()
+ List<ViewableTile> getForegroundTiles()
+ List<ViewableTile> getBackgroundTiles()
+ List<ViewableItem> getItems()
}


class EventItemUsedUp {
- ItemModel item
+ ItemModel item()
}


class GameModel {
- EventBus bus
- Map<String,ILevel> levels
- String level
- GameState state
- void fillLevels()
+ GameState getState()
+ void setState(GameState)
+ ControllableLevel getControllableLevel()
+ void setLevel(String)
+ void handleEvent(Event)
+ ViewableLevel getViewableLevel()
}


class PluginLoader {
~ {static} int CONSTANT_MODS
~ {static} Pattern classPattern
+ {static} List<String> listFiles(Class<?>,String,boolean)
+ {static} Stream<String> listClasses(Class<?>)
+ {static} Stream<String> listClasses(Class<?>,String)
+ {static} Stream<String> listClasses(Class<?>,String,boolean)
+ {static} Class<T> loadClass(String,Class<T>)
+ {static} Stream<Class<T>> loadClasses(Class<?>,Class<T>)
+ {static} Stream<Class<T>> loadClasses(Class<?>,String,Class<T>)
+ {static} Function<U,T> makeFactory(Class<T>,Class<U>)
+ {static} BiFunction<U,V,T> makeFactory(Class<T>,Class<U>,Class<V>)
+ {static} Function4<U,V,G,H,T> makeFactory(Class<T>,Class<U>,Class<V>,Class<G>,Class<H>)
+ {static} T getConstant(Class<?>,String,Class<T>)
}


class Barrel {
+ {static} char KEY
}

class EffectSpeedBoost {
- {static} float SPEED_BOOST
- {static} float JUMP_BOOST
}

class Background {
- Array<Texture> layers
- float x
+ void draw(Batch,float)
}


class TileFloatingGroundRight {
+ {static} char KEY
}

abstract class TileModel {
+ {static} float TILE_WIDTH
+ {static} float TILE_HEIGHT
# World world
# Body body
# Shape shape
- float width
- float height
# Body createBody(float,float)
# Shape createShape(float,float)
+ float getX()
+ float getY()
+ float getWidth()
+ float getHeight()
+ void step(float)
+ void handleEvent(Event)
}




Stepable <|-- ControllableLevel
Screen <|.. AbstractScreen
AbstractScreen <|-- GameOverScreen
GameStateGettable <|-- ControllableGameModel
ContactableTiles <|.. DoorModel
TileModel <|-- DoorModel
ViewableEffect <|.. Effect
Positionable <|-- ViewableItem
Sizeable <|-- ViewableItem
TileModel <|-- TileGroundLeft
ViewableItem <|.. ItemHP
ItemModel <|-- ItemHP
ViewableItem <|.. ItemModel
EventHandler <|.. ItemModel
ContactListener <|.. ItemModel
AbstractScreen <|-- PauseScreen
IAssetsManager <|.. AssetsManager
TileModel <|-- TileGroundSingle
Effect <|-- EffectJumpBoost
TileModel <|-- TileFloatingGroundLeft
EventHandler <|.. Controller
InputAdapter <|-- Controller
TileModel <|-- TileFloatingGround
AbstractScreen <|-- InfoScreen
TileModel <|-- TileGround
Stepable <|-- ControllablePlayerModel
Stage <|-- Hud
ITexturePack <|.. TexturePack
TileHalf <|-- TileFloatingGroundLeftSlim
AbstractScreen <|-- MenuScreen
ItemModel <|-- ItemEnergy
DamageTileModel <|-- Saw
ItemModel <|-- ItemMushroom
ContactableTiles <|.. DamageTileModel
TileModel <|-- DamageTileModel
Positionable <|-- ViewableTile
Sizeable <|-- ViewableTile
TileHalf <|-- TileFloatingGroundRightSlim
IHealth <|.. Health
AbstractScreen <|-- VictoryScreen
ContactListener <|-- ContactableTiles
Event <|.. EventDispose
AbstractScreen <|-- LevelScreen
TileModel <|-- TileFloatingGroundSingle
TileModel <|-- LeftLowerDoorClosed
DoorModel <|-- Door2
ContactListener <|.. ContactListeners
ViewableLevel <|-- ILevel
ControllableLevel <|-- ILevel
EventHandler <|-- ILevel
ContactListener <|-- ILevel
DamageTileModel <|-- Spike
Effect <|-- EffectHpUp
GameStateGettable <|-- ViewableGameModel
TileHalf <|-- TileFloatingGroundSingleSlim
Screen <|.. GameScreen
TileHalf <|-- TileFloatingGroundSlim
ControllablePlayerModel <|.. PlayerModel
ViewablePlayerModel <|.. PlayerModel
EventHandler <|.. PlayerModel
ContactListener <|.. PlayerModel
Sizeable <|-- ViewablePlayerModel
Positionable <|-- ViewablePlayerModel
PlayerStateGettable <|-- ViewablePlayerModel
EventHandler <|.. GameView
Game <|-- GameView
TileModel <|-- TileHalf
TileModel <|-- TileGroundRight
DoorModel <|-- Door1
ILevel <|.. Level
ViewableGameModel <|.. GameModel
ControllableGameModel <|.. GameModel
EventHandler <|.. GameModel
TileModel <|-- Barrel
Effect <|-- EffectSpeedBoost
Actor <|-- Background
TileModel <|-- TileFloatingGroundRight
ViewableTile <|.. TileModel
Stepable <|.. TileModel
EventHandler <|.. TileModel
@enduml